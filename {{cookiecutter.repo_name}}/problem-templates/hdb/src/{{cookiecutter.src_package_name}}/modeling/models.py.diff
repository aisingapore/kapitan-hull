--- {{cookiecutter.repo_name}}/src/{{cookiecutter.src_package_name}}/modeling/models.py
+++ {{cookiecutter.repo_name}}/problem-templates/hdb/src/{{cookiecutter.src_package_name}}/modeling/models.py
@@ -1,24 +1,55 @@
 """Module for containing architectures/definition of models."""
+import pandas as pd
+import xgboost as xgb
+from imblearn.pipeline import Pipeline
 
+import {{cookiecutter.src_package_name}} as {{cookiecutter.src_package_name_short}}
 
-class DummyModel():
-    """Dummy model that returns the input."""
+class Model:
+    """A Model class to train and evaluate an XGBoostRegressor with a predefined pipeline.
+
+    This class builds a pipeline that includes a data preprocessor and an XGBoostRegressor
+    for regression tasks.
+
+    Methods:
+        train(params, X_train, y_train):
+            Fits the pipeline using the provided training data and returns the training score.
+        evaluate(X_test, y_test):
+            Evaluates the trained model on test data, returning evaluation metrics.
+    """
 
     def __init__(self):
+        self.preprocessor = {{cookiecutter.src_package_name_short}}.data_prep.transforms.transformer()
+
+    def train(self, params: dict, X_train: pd.DataFrame, y_train: pd.DataFrame)-> float:
+        """Fit an XGBoostRegressor through a pipeline with predefined steps.
+
+        Args:
+        params (dict): Dictionary with parameters to train the model.
+        X_train (pandas.DataFrame): The training input samples as a pandas DataFrame.
+        y_train (pandas.DataFrame): The target values as a pandas DataFrame.
+
+        Returns:
+            float: The score from XGBoostRegressor.score() on the training dataset
+        """
+        self.steps = [
+            ("preprocessor", self.preprocessor),
+            ("XGBR", xgb.XGBRegressor(**params)),
+        ]
+        self.pipeline = Pipeline(self.steps)
+
+        self.pipeline.fit(X_train, y_train)
+        self.y_train_pred = self.pipeline.predict(X_train)
+        self.train_score = self.pipeline.score(X_train, y_train)
+
+        return self.train_score
+    
+    def save_model(self, path_to_model: str):
+        ## Save only the XGBoost part using its save_model() method
+        ## path_to_model e.g. "./models/xgbreg.json" or .bin
+        xgb_model = self.pipeline.named_steps["XGBR"]
+        xgb_model.save_model(path_to_model)
+
+    def evaluate(self, X_test, y_test):
+        ## Create your own evaluation function
         pass
-
-    def predict(self, x):
-        """'Prediction' of the dummy model.
-
-        Parameters
-        ----------
-        x : str
-            Input string.
-        
-        Returns
-        -------
-        str
-            Output string.
-        """
-
-        return x
