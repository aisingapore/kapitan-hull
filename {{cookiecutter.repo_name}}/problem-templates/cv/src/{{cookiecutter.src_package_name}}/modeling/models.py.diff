--- {{cookiecutter.repo_name}}/src/{{cookiecutter.src_package_name}}/modeling/models.py
+++ {{cookiecutter.repo_name}}/problem-templates/cv/src/{{cookiecutter.src_package_name}}/modeling/models.py
@@ -1,0 +2 @@
+import torch
@@ -4,2 +5,2 @@
-class DummyModel():
-    """Dummy model that returns the input."""
+class Net(torch.nn.Module):
+    """Simple CNN model for MNIST classification."""
@@ -8 +9,7 @@
-        pass
+        super(Net, self).__init__()
+        self.conv1 = torch.nn.Conv2d(1, 32, 3, 1)
+        self.conv2 = torch.nn.Conv2d(32, 64, 3, 1)
+        self.dropout1 = torch.nn.Dropout(0.25)
+        self.dropout2 = torch.nn.Dropout(0.5)
+        self.fc1 = torch.nn.Linear(9216, 128)
+        self.fc2 = torch.nn.Linear(128, 10)
@@ -10,2 +17,2 @@
-    def predict(self, x):
-        """'Prediction' of the dummy model.
+    def forward(self, x):
+        """Forward pass of the model.
@@ -15,7 +22,2 @@
-        x : str
-            Input string.
-        
-        Returns
-        -------
-        str
-            Output string.
+        x : torch.Tensor
+            Input tensor.
@@ -23,2 +25,13 @@
-
-        return x
+        x = self.conv1(x)
+        x = torch.nn.functional.relu(x)
+        x = self.conv2(x)
+        x = torch.nn.functional.relu(x)
+        x = torch.nn.functional.max_pool2d(x, 2)
+        x = self.dropout1(x)
+        x = torch.flatten(x, 1)
+        x = self.fc1(x)
+        x = torch.nn.functional.relu(x)
+        x = self.dropout2(x)
+        x = self.fc2(x)
+        output = torch.nn.functional.log_softmax(x, dim=1)
+        return output
