--- {{cookiecutter.repo_name}}/src/{{cookiecutter.src_package_name}}/modeling/models.py
+++ {{cookiecutter.repo_name}}/problem-templates/cv/src/{{cookiecutter.src_package_name}}/modeling/models.py
@@ -1,41 +1,37 @@
 """Module for containing architectures/definition of models."""
-import time
+import torch
 
 
-class DummyModel():
-    """Dummy model that returns the input."""
+class Net(torch.nn.Module):
+    """Simple CNN model for MNIST classification."""
 
     def __init__(self):
-        pass
+        super(Net, self).__init__()
+        self.conv1 = torch.nn.Conv2d(1, 32, 3, 1)
+        self.conv2 = torch.nn.Conv2d(32, 64, 3, 1)
+        self.dropout1 = torch.nn.Dropout(0.25)
+        self.dropout2 = torch.nn.Dropout(0.5)
+        self.fc1 = torch.nn.Linear(9216, 128)
+        self.fc2 = torch.nn.Linear(128, 10)
 
-    def train(self, X=None, y=None):
-        """'Trains' the dummy model.
+    def forward(self, x):
+        """Forward pass of the model.
 
         Parameters
         ----------
-        X : Any
-            Dummy feature data.
-        y : Any
-            Dummy target data.
-
-        Returns
-        -------
-        None
+        x : torch.Tensor
+            Input tensor.
         """
-        time.sleep(1)
-
-    def predict(self, x=''):
-        """'Prediction' of the dummy model.
-
-        Parameters
-        ----------
-        x : str
-            Input string.
-        
-        Returns
-        -------
-        str
-            Output string.
-        """
-
-        return x
+        x = self.conv1(x)
+        x = torch.nn.functional.relu(x)
+        x = self.conv2(x)
+        x = torch.nn.functional.relu(x)
+        x = torch.nn.functional.max_pool2d(x, 2)
+        x = self.dropout1(x)
+        x = torch.flatten(x, 1)
+        x = self.fc1(x)
+        x = torch.nn.functional.relu(x)
+        x = self.dropout2(x)
+        x = self.fc2(x)
+        output = torch.nn.functional.log_softmax(x, dim=1)
+        return output
