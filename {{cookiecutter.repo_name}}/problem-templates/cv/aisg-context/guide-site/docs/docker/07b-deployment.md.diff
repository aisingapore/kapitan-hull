--- {{cookiecutter.repo_name}}/aisg-context/guide-site/docs/docker/07b-deployment.md
+++ {{cookiecutter.repo_name}}/problem-templates/cv/aisg-context/guide-site/docs/docker/07b-deployment.md
@@ -79,48 +79,45 @@
 === "Linux"
 
     ```bash
     sudo chown 2222:2222 ./models
-    export MODEL_UUID=<MLFLOW_RUN_UUID>
+    export PRED_MODEL_UUID=<MLFLOW_RUN_UUID>
     docker run --rm \
         -v ./models:/models \
         -e MLFLOW_TRACKING_URI=http://localhost:5000 \
         --network host \
         {{cookiecutter.registry_project_path}}/cpu:0.1.0 \
-        python -c "import mlflow; mlflow.artifacts.download_artifacts(artifact_uri='runs:/$MODEL_UUID/', dst_path='/models/$MODEL_UUID')"
+        python -c "import mlflow; mlflow.artifacts.download_artifacts(artifact_uri='runs:/$PRED_MODEL_UUID/', dst_path='/models/$PRED_MODEL_UUID')"
     ```
 
 === "macOS"
 
     ```bash
-    export MODEL_UUID=<MLFLOW_RUN_UUID>
+    export PRED_MODEL_UUID=<MLFLOW_RUN_UUID>
     docker run --rm \
         -v ./models:/models \
         -e MLFLOW_TRACKING_URI=http://localhost:5000 \
         --network host \
         {{cookiecutter.registry_project_path}}/cpu:0.1.0 \
-        python -c "import mlflow; mlflow.artifacts.download_artifacts(artifact_uri='runs:/$MODEL_UUID/', dst_path='/models/$MODEL_UUID')"
+        python -c "import mlflow; mlflow.artifacts.download_artifacts(artifact_uri='runs:/$PRED_MODEL_UUID/', dst_path='/models/$PRED_MODEL_UUID')"
     ```
 
 === "Windows PowerShell"
 
     ```powershell
-    $Env:MODEL_UUID=<MLFLOW_RUN_UUID>
+    $Env:PRED_MODEL_UUID=<MLFLOW_RUN_UUID>
     docker run --rm `
         -v .\models:/models `
         -e MLFLOW_TRACKING_URI=http://localhost:5000 `
         --network host `
         {{cookiecutter.registry_project_path}}/cpu:0.1.0 `
-        python -c "import mlflow; mlflow.artifacts.download_artifacts(artifact_uri='runs:/$MODEL_UUID/', dst_path='/models/$MODEL_UUID')"
+        python -c "import mlflow; mlflow.artifacts.download_artifacts(artifact_uri='runs:/$PRED_MODEL_UUID/', dst_path='/models/$PRED_MODEL_UUID')"
     ```
 
 Executing the commands above will download the artifacts related to the
 experiment run `<MLFLOW_RUN_UUID>` to this repository's subdirectory 
 `models`. However, the specific subdirectory that is relevant for our 
-modules to load will be `./models/<MLFLOW_RUN_UUID>/output.txt`.
-
-Now, let's proceed and spin up an inference server using the package 
-that exists within the repository.
+modules to load will be `./models/<MLFLOW_RUN_UUID>/model/model.pt`.
 
 [beginner tutorials]: https://fastapi.tiangolo.com/tutorial/
 
 ### Running the API Server
@@ -145,8 +142,9 @@
     docker run --rm \
         -p 8080:8080 \
         -v ./models:/home/aisg/{{cookiecutter.repo_name}}/models \
         -w /home/aisg/{{cookiecutter.repo_name}}/src \
+        -e PRED_MODEL_PATH="../models/$PRED_MODEL_UUID/model/model.pt" \
         {{cookiecutter.registry_project_path}}/gpu:0.1.0 \
         gunicorn {{cookiecutter.src_package_name}}_fastapi.main:APP \
             -k uvicorn.workers.UvicornWorker \
             -b 0.0.0.0:8080 -w 2 -t 90
@@ -158,8 +156,9 @@
     docker run --rm \
         -p 8080:8080 \
         -v ./models:/home/aisg/{{cookiecutter.repo_name}}/models \
         -w /home/aisg/{{cookiecutter.repo_name}}/src \
+        -e PRED_MODEL_PATH="../models/$PRED_MODEL_UUID/model/model.pt" \
         {{cookiecutter.registry_project_path}}/gpu:0.1.0 \
         gunicorn {{cookiecutter.src_package_name}}_fastapi.main:APP \
             -k uvicorn.workers.UvicornWorker \
             -b 0.0.0.0:8080 -w 2 -t 90
@@ -179,8 +178,9 @@
     docker run --rm `
         -p 8080:8080 `
         -v .\models:/home/aisg/{{cookiecutter.repo_name}}/models `
         -w /home/aisg/{{cookiecutter.repo_name}}/src `
+        -e PRED_MODEL_PATH="../models/$Env:PRED_MODEL_UUID/model/model.pt" `
         {{cookiecutter.registry_project_path}}/gpu:0.1.0 `
         gunicorn {{cookiecutter.src_package_name}}_fastapi.main:APP `
             -k uvicorn.workers.UvicornWorker `
             -b 0.0.0.0:8080 -w 2 -t 90
@@ -199,36 +199,36 @@
     ```bash
     docker run --rm --network=host \
         curlimages/curl -X POST \
             localhost:8080/api/v1/model/predict \
-            -H 'Content-Type: application/json' \
-            -d '"string"'
+            -H 'Content-Type: multipart/form-data' \
+            -F "image_file=@/path/to/image/file"
     ```
 
 === "macOS"
 
     ```bash
     docker run --rm --network=host \
         curlimages/curl -X POST \
             localhost:8080/api/v1/model/predict \
-            -H 'Content-Type: application/json' \
-            -d '"string"'
+            -H 'Content-Type: multipart/form-data' \
+            -F "image_file=@/path/to/image/file"
     ```
 
 === "Windows PowerShell"
 
     ```powershell
     docker run --rm --network=host `
         curlimages/curl -X POST `
             localhost:8080/api/v1/model/predict `
-            -H 'Content-Type: application/json' `
-            -d '"string"'
+            -H 'Content-Type: multipart/form-data' `
+            -F "image_file=@/path/to/image/file"
     ```
     
 Output sample:
 
 ```
-{"data":[{"input":"string"}]}
+{"data":[{"image_filename":"XXXXX.png","prediction":"X"}]}
 ```
 
 With the returned JSON object, we have successfully submitted a request
 to the FastAPI server and it returned predictions as part of the
@@ -244,9 +244,10 @@
 data and schema validation, as well as [settings management]. There's a 
 class called `Settings` under the module
 `src/{{cookiecutter.src_package_name}}_fastapi/config.py`. This class 
 contains several fields: some are defined and some others not. The 
-`MODEL_UUID` field inherits their values from the environment variables.
+`PRED_MODEL_UUID` and `PRED_MODEL_PATH` fields inherit their values 
+from the environment variables.
 
 `src/{{cookiecutter.src_package_name}}_fastapi/config.py`:
 ```python
 ...
@@ -255,9 +256,12 @@
     API_NAME: str = "{{cookiecutter.src_package_name}}_fastapi"
     API_V1_STR: str = "/api/v1"
     LOGGER_CONFIG_PATH: str = "../conf/logging.yaml"
 
-    MODEL_UUID: str
+    USE_CUDA: bool = False
+    USE_MPS: bool = False
+    PRED_MODEL_UUID: str
+    PRED_MODEL_PATH: str
 ...
 ```
 
 FastAPI automatically generates interactive API documentation for easy
