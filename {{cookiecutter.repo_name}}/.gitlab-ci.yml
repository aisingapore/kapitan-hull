default:
  tags:
{%- if cookiecutter.platform == 'onprem' %}
    - on-prem
{%- elif cookiecutter.platform == 'gcp' %}
    - gcp
{%- endif %}
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - ./conda
  image:
    name: ${PYTHON_IMAGE}

stages: 
  - build
  - test
  - deploy
  - deploy-docs

variables:
  PYTHON_IMAGE: continuumio/miniconda3:24.7.1-0
  VENV_DIRECTORY: ./conda/{{cookiecutter.repo_name}}
  IMAGE_TAG: latest
{%- if cookiecutter.aisg %}

include:
  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-integration/build-conda@0.1.1
    inputs:
      job_name: build
      stage: build:conda-env
      image: ${PYTHON_IMAGE}
      requirements_file: {{cookiecutter.repo_name}}-conda-env.yaml
      python_version: "3.12"
      venv_directory: ${VENV_DIRECTORY}

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-integration/ruff-lint@0.1.1
    inputs:
      job_name: test:lint
      stage: test
      image: ${PYTHON_IMAGE}
      venv_directory: ${VENV_DIRECTORY}

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-integration/pytest@0.1.1
    inputs:
      job_name: test:pytest
      stage: test
      image: ${PYTHON_IMAGE}
      venv_directory: ${VENV_DIRECTORY}

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-deployment/docker-build@0.1.1
    inputs:
      job_name: build:cpu-build
      stage: deploy
      context: .
      dockerfile: docker/{{cookiecutter.repo_name}}-cpu.Dockerfile
      docker_image_name: cpu
      image_tag: ${CI_COMMIT_SHORT_SHA}
      expiry_time: "30"

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-deployment/docker-push@0.1.1
    inputs:
      job_name: build:cpu-push
      stage: deploy
      docker_image_name: cpu
      registry: {{cookiecutter.registry_project_path.split('/')[0]}}     
      destination: {{cookiecutter.registry_project_path}}/cpu:${CI_COMMIT_SHORT_SHA}

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-deployment/docker-build@0.1.1
    inputs:
      job_name: build:gpu-build
      stage: deploy
      context: .
      dockerfile: docker/{{cookiecutter.repo_name}}-gpu.Dockerfile
      docker_image_name: gpu
      image_tag: ${CI_COMMIT_SHORT_SHA}
      expiry_time: "30"
{%- if cookiecutter.platform == 'onprem' %}

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-deployment/docker-push@0.1.1
    inputs:
      job_name: build:gpu-push
      stage: deploy
      docker_image_name: gpu
      registry: {{cookiecutter.registry_project_path.split('/')[0]}}
      destination: {{cookiecutter.registry_project_path}}/gpu:${CI_COMMIT_SHORT_SHA}
      registry_username: robot\$harbor-robot-token
      registry_access_key: ${HARBOR_ROBOT_TOKEN}
{%- elif cookiecutter.platform == 'gcp' %}

  - component: ${CI_SERVER_FQDN}/templates/cicd-workflow/continuous-deployment/docker-push@0.1.1
    inputs:
      job_name: build:gpu-push
      stage: deploy
      docker_image_name: gpu
      registry: {{cookiecutter.registry_project_path.split('/')[0]}}
      destination: {{cookiecutter.registry_project_path}}/gpu:${CI_COMMIT_SHORT_SHA} 
      registry_access_key: ${GCLOUD_SERVICE_KEY}
{%- endif %}

build:conda-env:
  script:
    - conda env create -f {{cookiecutter.repo_name}}-conda-env.yaml -p $VENV_DIRECTORY -y
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

test:lint:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

test:pytest:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

build:cpu-build:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:cpu-push:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build:cpu-build
      artifacts: true

build:gpu-build:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:gpu-push:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build:gpu-build
      artifacts: true
{%- else %}

build:conda-env:
  stage: build
  script:
    - conda env create -f {{cookiecutter.repo_name}}-conda-env.yaml -p ${VENV_DIRECTORY} -y
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - {{cookiecutter.repo_name}}-conda-env.yaml
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - {{cookiecutter.repo_name}}-conda-env.yaml
    - if: $CI_PIPELINE_SOURCE == "web"
      changes:
        - {{cookiecutter.repo_name}}-conda-env.yaml
    - if: $CI_PIPELINE_SOURCE == "web" && $BUILD_CONDA
    - if: $CI_COMMIT_TAG
      when: never
  needs: []

test:lint:
  stage: test
  before_script:
    - source activate ${VENV_DIRECTORY}
    - pip install -r dev-requirements.txt
  script:
    - pylint src --fail-under=7.0 --ignore=tests --disable=W1202
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - src/**/*
        - conf/**/*
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_TAG
      when: never
  needs:
    - job: build:conda-env
      optional: true

test:pytest:
  stage: test
  before_script: 
    - source activate ${VENV_DIRECTORY}
    - pip install -r dev-requirements.txt
  script:
    - pytest src/tests --junitxml=./rspec.xml
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - src/**/*
        - conf/**/*
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_TAG
      when: never
  artifacts:
    paths:
      - rspec.xml
    reports:
      junit: rspec.xml
  needs:
    - job: build:conda-env
      optional: true

build:cpu-image:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
{%- if cookiecutter.platform == 'gcp' %}
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /kaniko/.docker/config.json
{%- endif %}
  before_script:
{%- if cookiecutter.platform == 'onprem' %}
    - "[[ -z ${HARBOR_ROBOT_CREDS_JSON} ]] && echo 'HARBOR_ROBOT_CREDS_JSON variable is not set.' && exit 1"
{%- elif cookiecutter.platform == 'gcp' %}
    - "[[ -z ${GCP_SERVICE_ACCOUNT_KEY} ]] && echo 'GCP_SERVICE_ACCOUNT_KEY variable is not set.' && exit 1"
{%- endif %}
  script:
    - mkdir -p /kaniko/.docker
{%- if cookiecutter.platform == 'onprem' %}
    - cat $HARBOR_ROBOT_CREDS_JSON > /kaniko/.docker/config.json
{%- elif cookiecutter.platform == 'gcp' %}
    - cat $GCP_SERVICE_ACCOUNT_KEY > /kaniko/.docker/config.json
{%- endif %}
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/{{cookiecutter.repo_name}}-cpu.Dockerfile"
      --destination "{{cookiecutter.registry_project_path}}/cpu:${CI_COMMIT_SHORT_SHA}"
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - docker/{{cookiecutter.repo_name}}-cpu.Dockerfile
        - src/**/*
        - conf/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web" && $BUILD_ALL
    - if: $CI_PIPELINE_SOURCE == "web" && $BUILD_DATAPREP
  needs:
    - job: test:lint
      optional: true
    - job: test:pytest
      optional: true

build:gpu-image:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
{%- if cookiecutter.platform == 'gcp' %}
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /kaniko/.docker/config.json
{%- endif %}
  before_script:
{%- if cookiecutter.platform == 'onprem' %}
    - "[[ -z ${HARBOR_ROBOT_CREDS_JSON} ]] && echo 'HARBOR_ROBOT_CREDS_JSON variable is not set.' && exit 1"
{%- elif cookiecutter.platform == 'gcp' %}
    - "[[ -z ${GCP_SERVICE_ACCOUNT_KEY} ]] && echo 'GCP_SERVICE_ACCOUNT_KEY variable is not set.' && exit 1"
{%- endif %}
  script:
    - mkdir -p /kaniko/.docker
{%- if cookiecutter.platform == 'onprem' %}
    - cat $HARBOR_ROBOT_CREDS_JSON > /kaniko/.docker/config.json
{%- elif cookiecutter.platform == 'gcp' %}
    - cat $GCP_SERVICE_ACCOUNT_KEY > /kaniko/.docker/config.json
{%- endif %}
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/docker/{{cookiecutter.repo_name}}-gpu.Dockerfile"
      --destination "{{cookiecutter.registry_project_path}}/gpu:${CI_COMMIT_SHORT_SHA}"
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - docker/{{cookiecutter.repo_name}}-gpu.Dockerfile
        - src/**/*
        - conf/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web" && $BUILD_ALL
    - if: $CI_PIPELINE_SOURCE == "web" && $BUILD_MODEL
  needs:
    - job: test:lint
      optional: true
    - job: test:pytest
      optional: true

build:retag-images:
  stage: deploy
  image:
{%- if cookiecutter.platform == 'onprem' %}
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
{%- elif cookiecutter.platform == 'gcp' %}
    name: google/cloud-sdk:debian_component_based
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /gcp-sa.json
{%- endif %}
  before_script:
{%- if cookiecutter.platform == 'onprem' %}
    - "[[ -z ${HARBOR_ROBOT_CREDS_JSON} ]] && echo 'HARBOR_ROBOT_CREDS_JSON variable is not set.' && exit 1"
{%- elif cookiecutter.platform == 'gcp' %}
    - "[[ -z ${GCP_SERVICE_ACCOUNT_KEY} ]] && echo 'GCP_SERVICE_ACCOUNT_KEY variable is not set.' && exit 1"
{%- endif %}
  script:
{%- if cookiecutter.platform == 'onprem' %}
    - cat $HARBOR_ROBOT_CREDS_JSON > /root/.docker/config.json
    - crane tag {{cookiecutter.registry_project_path}}/cpu:${CI_COMMIT_SHORT_SHA} ${CI_COMMIT_TAG}
    - crane tag {{cookiecutter.registry_project_path}}/gpu:${CI_COMMIT_SHORT_SHA} ${CI_COMMIT_TAG}
{%- elif cookiecutter.platform == 'gcp' %}
    - cat $GCP_SERVICE_ACCOUNT_KEY > /gcp-sa.json
    - gcloud container images add-tag "{{cookiecutter.registry_project_path}}/cpu:${CI_COMMIT_SHORT_SHA}" "{{cookiecutter.registry_project_path}}/data-prep:${CI_COMMIT_TAG}"
    - gcloud container images add-tag "{{cookiecutter.registry_project_path}}/gpu:${CI_COMMIT_SHORT_SHA}" "{{cookiecutter.registry_project_path}}/model-training:${CI_COMMIT_TAG}"
{%- endif %}
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build:cpu-image
      optional: true
    - job: build:gpu-image
      optional: true
{%- endif %}

pages:
  stage: deploy-docs
  before_script:
    - source activate ${VENV_DIRECTORY}
    - pip install -r docs-requirements.txt
    - pip install -r aisg-context/guide-site/mkdocs-requirements.txt
  script:
    - sphinx-apidoc -f -o docs src
    - sphinx-build -b html docs public
    - mkdocs build -v -f aisg-context/guide-site/mkdocs.yml -d $PWD/public/guide
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - docs/**/*
        - src/**/*
        - aisg-context/guide-site/**/*
  needs:
    - job: build:conda-env
      optional: true
